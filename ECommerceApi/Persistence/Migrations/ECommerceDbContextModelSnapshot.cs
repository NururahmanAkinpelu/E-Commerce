// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitties.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsDeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("IsDeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Domain.Entitties.CartProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsDeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("IsDeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("Domain.Entitties.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IsDeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("IsDeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Category = "Electronics",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6481),
                            Description = "High-quality wireless headphones with noise cancellation and 30-hour battery life",
                            ImageUrl = "https://example.com/products/headphones.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Wireless Bluetooth Headphones",
                            Price = 99.99m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Category = "Accessories",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6494),
                            Description = "Durable protective case for smartphones with shock absorption",
                            ImageUrl = "https://example.com/products/phone-case.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Smartphone Case",
                            Price = 24.99m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Category = "Home & Kitchen",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6504),
                            Description = "Programmable coffee maker with 12-cup capacity and auto-shutoff feature",
                            ImageUrl = "https://example.com/products/coffee-maker.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Coffee Maker",
                            Price = 79.99m,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Category = "Electronics",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6513),
                            Description = "High-precision gaming mouse with RGB lighting and programmable buttons",
                            ImageUrl = "https://example.com/products/gaming-mouse.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Gaming Mouse",
                            Price = 59.99m,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Category = "Sports & Fitness",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6522),
                            Description = "Non-slip yoga mat with extra cushioning for comfortable practice",
                            ImageUrl = "https://example.com/products/yoga-mat.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Yoga Mat",
                            Price = 29.99m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Category = "Electronics",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6543),
                            Description = "Fast wireless charging pad compatible with all Qi-enabled devices",
                            ImageUrl = "https://example.com/products/wireless-charger.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Wireless Charging Pad",
                            Price = 39.99m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Category = "Electronics",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6551),
                            Description = "Portable waterproof Bluetooth speaker with 360-degree sound",
                            ImageUrl = "https://example.com/products/bluetooth-speaker.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Bluetooth Speaker",
                            Price = 89.99m,
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Category = "Accessories",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6566),
                            Description = "Adjustable aluminum laptop stand for better ergonomics",
                            ImageUrl = "https://example.com/products/laptop-stand.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Laptop Stand",
                            Price = 49.99m,
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Category = "Sports & Fitness",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6576),
                            Description = "Insulated stainless steel water bottle that keeps drinks cold for 24 hours",
                            ImageUrl = "https://example.com/products/water-bottle.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Water Bottle",
                            Price = 19.99m,
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Category = "Home & Office",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6590),
                            Description = "Adjustable LED desk lamp with USB charging port and touch controls",
                            ImageUrl = "https://example.com/products/desk-lamp.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "LED Desk Lamp",
                            Price = 34.99m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Category = "Electronics",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6598),
                            Description = "True wireless earbuds with active noise cancellation and 8-hour battery",
                            ImageUrl = "https://example.com/products/wireless-earbuds.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Wireless Earbuds",
                            Price = 129.99m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Category = "Sports & Fitness",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6607),
                            Description = "Smart fitness tracker with heart rate monitor and sleep tracking",
                            ImageUrl = "https://example.com/products/fitness-tracker.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Fitness Tracker",
                            Price = 79.99m,
                            StockQuantity = 55
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Category = "Home & Kitchen",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6616),
                            Description = "Digital kitchen scale with precision weighing up to 11 lbs",
                            ImageUrl = "https://example.com/products/kitchen-scale.jpg",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Kitchen Scale",
                            Price = 24.99m,
                            StockQuantity = 25
                        });
                });

            modelBuilder.Entity("Domain.Entitties.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IsDeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("IsDeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerified")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "123 Main St, New York, NY 10001",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6404),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsEmailVerified = true,
                            IsPhoneNumberVerified = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "Doe",
                            PasswordHash = "hashedpassword123",
                            PhoneNumber = "+1234567890",
                            ProfilePictureUrl = "https://example.com/profiles/john.jpg",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "456 Oak Ave, Los Angeles, CA 90210",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6429),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsEmailVerified = true,
                            IsPhoneNumberVerified = true,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "Smith",
                            PasswordHash = "hashedpassword456",
                            PhoneNumber = "+1987654321",
                            ProfilePictureUrl = "https://example.com/profiles/jane.jpg",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "789 Admin Blvd, Chicago, IL 60601",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 8, 13, 11, 37, 20, 757, DateTimeKind.Utc).AddTicks(6463),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsDeleteBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsEmailVerified = true,
                            IsPhoneNumberVerified = true,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "User",
                            PasswordHash = "hashedpasswordadmin",
                            PhoneNumber = "+1555666777",
                            ProfilePictureUrl = "https://example.com/profiles/admin.jpg",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entitties.Cart", b =>
                {
                    b.HasOne("Domain.Entitties.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitties.CartProduct", b =>
                {
                    b.HasOne("Domain.Entitties.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entitties.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("Domain.Entitties.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
